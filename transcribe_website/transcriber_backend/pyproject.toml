[tool.poetry]
name = "transcriber-backend"
version = "0.1.0"
description = ""
authors = ["BuRny <gamingburny@gmail.com>"]
package-mode = false

[tool.poetry.dependencies]
python = ">=3.10, <3.14"
# Argparse with dataclass
simple-parsing = "^0.1"
# Better dataclasses
pydantic = "^2"
# Logging
loguru = "^0.7"
# Better datetime
arrow = "^1.2"
# Database interaction
prisma = "^0.15"
# Display sizes in human readable format
humanize = "^4"
# Progress bar
tqdm = "^4"
# Translator
deep-translator = "^1"
python-dotenv = "^1"
whisperx = "^3"
# https://stackoverflow.com/a/76359919/10882657
torch = { version = "^2.4.1+cpu", source = "pytorch_cpu" }
torchaudio = {version = "^2.4.1+cpu", source = "pytorch_cpu"}
deepmultilingualpunctuation = "^1.0.1"
# Had to fix version to make poetry work
llvmlite = "0.43.0"
numba = "0.60.0"
langdetect = "^1.0.9"
numpy = "<2"

[tool.poetry.group.dev.dependencies]
# Linter
ruff = "^0.1.14"
# Type checker
pyre-check = "^0.9.18"

[[tool.poetry.source]]
name = "pytorch_cpu"
url = "https://download.pytorch.org/whl/cpu"
priority = "explicit"

[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

[tool.yapf]
based_on_style = "pep8"
column_limit = 120
split_arguments_when_comma_terminated = true
dedent_closing_brackets = true
allow_split_before_dict_value = false

[tool.ruff]
target-version = 'py38'
line-length = 120
# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"
select = [
    "C4",  # flake8-comprehensions
    "E",   # Error
    "F",   # pyflakes
    "BLE", # flake8-blind-except
    "I",   # isort
    "N",   # pep8-naming
    "PGH", # pygrep-hooks
    "PTH", # flake8-use-pathlib
    "SIM", # flake8-simplify
    "W",   # Warning
    "Q",   # flake8-quotes
    "YTT", # flake8-2020
    "UP",  # pyupgrade
    #    "A",  # flake8-builtins
]

[tool.ruff.pyupgrade]
# Preserve types, even if a file imports `from __future__ import annotations`.
# Remove once support for py3.8 and 3.9 is dropped
keep-runtime-typing = true

[tool.ruff.pep8-naming]
# Allow Pydantic's `@validator` decorator to trigger class method treatment.
classmethod-decorators = ["pydantic.validator", "classmethod"]
