[project]
name = "src"
version = "0.1.0"
requires-python = ">=3.10, <3.13"
dependencies = [
    # Time management
    "arrow>=1.3.0",
    # xml parsing
    "beautifulsoup4>=4.12.3",
    # Epub Parsing
    "ebooklib>=0.18",
    # Web requests (sync + async)
    "httpx>=0.27.2",
    # Websockets for httpx
    "httpx-ws>=0.6.2",
    # Fastapi alternative https://docs.litestar.dev/latest/
    "litestar[standard]>=2.12.1",
    # Simple logger
    "loguru>=0.7.2",
    # Analyse mp3 files in memory
    "mutagen>=1.47.0",
    # Language manipulation
    "nltk>=3.9.1",
    # Database
    "prisma>=0.15.0",
    # Dataclasses with type validation
    "pydantic>=2.9.2",
    # PDF Parsing
    # "pymupdf>=1.24.13",
    # Load .env files easily
    "python-dotenv>=1.0.1",
    # Audio generation
    "edge-tts>=6.1.18",
    # Zip files with low memory footprint
    "stream-zip>=0.0.83",
    # AWS S3
    "minio>=7.2.10",
    "humanize>=4.11.0",
]

[tool.uv]
dev-dependencies = [
    # Property based testing
    "hypothesis>=6.118.8",
    # Info about the system
    "psutil>=6.1.0",
    # Type checker
    "pyre-check>=0.9.23",
    "pytest>=8.3.3",
    # Async await support
    "pytest-asyncio>=0.24.0",
    "pytest-benchmark>=5.1.0",
    # Set different env while testing
    "pytest-env>=1.1.5",
    # Mock requests
    "pytest-httpx>=0.33.0",
    "pytest-random-order>=1.1.1",
    # Linter and autoformat
    "ruff>=0.7.3",
    "toml>=0.10.2",
]

[tool.yapf]
based_on_style = "pep8"
column_limit = 120
split_arguments_when_comma_terminated = true
dedent_closing_brackets = true
allow_split_before_dict_value = false

[tool.ruff]
target-version = 'py310'
line-length = 120

[tool.ruff.lint]
# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"
select = [
    "C4",  # flake8-comprehensions
    "E",   # Error
    "F",   # pyflakes
    "BLE", # flake8-blind-except
    # "I",   # isort
    "N",   # pep8-naming
    "PGH", # pygrep-hooks
    "PTH", # flake8-use-pathlib
    "SIM", # flake8-simplify
    "W",   # Warning
    "Q",   # flake8-quotes
    "YTT", # flake8-2020
    "UP",  # pyupgrade
    #    "A",  # flake8-builtins
]
# Allow Pydantic's `@validator` decorator to trigger class method treatment.
pep8-naming.classmethod-decorators = ["pydantic.validator", "classmethod"]

[tool.pytest.ini_options]
pythonpath = "src"

[tool.pytest_env]
# Env variables to be used while tests run
STAGE = "test"
POSTGRES_CONNECTION_STRING = "postgresql://test:test@localhost:5433/test"
BACKEND_SERVER_URL = "http://localhost:8000"
MINIO_URL = "localhost:9000"
MINIO_ACCESS_TOKEN = "mylocaldevkey"
MINIO_SECRET_KEY = "mylocaldevpassword"
MINIO_AUDIOBOOK_BUCKET = "audiobooks-test"
MINIO_TELEGRAM_FILES_BUCKET = "telegram-files"
